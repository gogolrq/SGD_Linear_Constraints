#(a)
n=300
x=matrix(c(runif(n,min=0,max=1)),nrow=n)
e=matrix(c(rnorm(n,mean=0,sd=2)),nrow=n)
fx=matrix(1,nrow=n)
y=matrix(1,nrow=n)
for (i in 1:n){
fx[i]=60*(x[i]-1)^2*(x[i])^5-100*(x[i]-1)^4*x[i]
y[i]=fx[i]+e[i]
}
GCV=matrix(1,nrow=28)
for (k in 3:30){
fit=lm(y~bs(x,df=k))
pred=predict(fit)
GCV[k-2]=(sum((y-pred)^2)/n)/((1-(k+1)/n)^2)
}
plot(3:30,GCV,type='b',xlab='k',ylab='GCV')
#(b)
par(mfrow=c(2,1))
plot(x,fx,type="b",col='red')
lm1=lm(fx~bs(x,degree=4))
plot(x,lm1$fitted.values,col='blue',ylab="fitted values")
#(c)
#Replace function bs with ns
library(ISLR)
library(splines)
set.seed(10)
#(a)
n=300
x=matrix(c(runif(n,min=0,max=1)),nrow=n)
e=matrix(c(rnorm(n,mean=0,sd=2)),nrow=n)
fx=matrix(1,nrow=n)
y=matrix(1,nrow=n)
for (i in 1:n){
fx[i]=60*(x[i]-1)^2*(x[i])^5-100*(x[i]-1)^4*x[i]
y[i]=fx[i]+e[i]
}
GCV=matrix(1,nrow=28)
for (k in 3:30){
fit=lm(y~bs(x,df=k))
pred=predict(fit)
GCV[k-2]=(sum((y-pred)^2)/n)/((1-(k+1)/n)^2)
}
plot(3:30,GCV,type='b',xlab='k',ylab='GCV')
#(b)
par(mfrow=c(2,1))
plot(x,fx,type="b",col='red')
lm1=lm(fx~bs(x,degree=4))
plot(x,lm1$fitted.values,col='blue',ylab="fitted values")
#(c)
#Replace function bs with ns
library(ISLR)
library(splines)
set.seed(10)
#(a)
n=300
x=matrix(c(runif(n,min=0,max=1)),nrow=n)
e=matrix(c(rnorm(n,mean=0,sd=2)),nrow=n)
fx=matrix(1,nrow=n)
y=matrix(1,nrow=n)
for (i in 1:n){
fx[i]=60*(x[i]-1)^2*(x[i])^5-100*(x[i]-1)^4*x[i]
y[i]=fx[i]+e[i]
}
GCV=matrix(1,nrow=28)
for (k in 3:30){
fit=lm(y~bs(x,df=k))
pred=predict(fit)
GCV[k-2]=(sum((y-pred)^2)/n)/((1-(k+1)/n)^2)
}
plot(3:30,GCV,type='b',xlab='k',ylab='GCV')
library(ISLR)
library(splines)
set.seed(10)
#(a)
n=300
x=matrix(c(runif(n,min=0,max=1)),nrow=n)
e=matrix(c(rnorm(n,mean=0,sd=2)),nrow=n)
fx=matrix(1,nrow=n)
y=matrix(1,nrow=n)
for (i in 1:n){
fx[i]=60*(x[i]-1)^2*(x[i])^5-100*(x[i]-1)^4*x[i]
y[i]=fx[i]+e[i]
}
GCV=matrix(1,nrow=28)
for (k in 3:30){
fit=lm(y~bs(x,df=k))
pred=predict(fit)
GCV[k-2]=(sum((y-pred)^2)/n)/((1-(k+1)/n)^2)
}
plot(3:30,GCV,type='b',xlab='k',ylab='GCV')
#(b)
par(mfrow=c(2,1))
plot(x,fx,type="b",col='red')
lm1=lm(fx~bs(x,degree=4))
plot(x,lm1$fitted.values,col='blue',ylab="fitted values")
#(c)
#Replace function bs with ns
library(ISLR)
library(splines)
set.seed(10)
#(a)
n=300
x=matrix(c(runif(n,min=0,max=1)),nrow=n)
e=matrix(c(rnorm(n,mean=0,sd=2)),nrow=n)
fx=matrix(1,nrow=n)
y=matrix(1,nrow=n)
for (i in 1:n){
fx[i]=60*(x[i]-1)^2*(x[i])^5-100*(x[i]-1)^4*x[i]
y[i]=fx[i]+e[i]
}
GCV=matrix(1,nrow=28)
for (k in 3:30){
fit=lm(y~bs(x,df=k))
pred=predict(fit)
GCV[k-2]=(sum((y-pred)^2)/n)/((1-(k+1)/n)^2)
}
plot(3:30,GCV,type='b',xlab='k',ylab='GCV')
#(b)
par(mfrow=c(2,1))
plot(x,fx,type="b",col='red')
index=order(x)
x[order]
x[index]
library(ISLR)
library(splines)
set.seed(10)
#(a)
n=300
x=matrix(c(runif(n,min=0,max=1)),nrow=n)
e=matrix(c(rnorm(n,mean=0,sd=2)),nrow=n)
fx=matrix(1,nrow=n)
y=matrix(1,nrow=n)
for (i in 1:n){
fx[i]=60*(x[i]-1)^2*(x[i])^5-100*(x[i]-1)^4*x[i]
y[i]=fx[i]+e[i]
}
GCV=matrix(1,nrow=28)
for (k in 3:30){
fit=lm(y~bs(x,df=k))
pred=predict(fit)
GCV[k-2]=(sum((y-pred)^2)/n)/((1-(k+1)/n)^2)
}
plot(3:30,GCV,type='b',xlab='k',ylab='GCV')
#(b)
par(mfrow=c(2,1))
index=order(x)
plot(x[index],fx[index],type="b",col='red')
lm1=lm(fx~bs(x,degree=4))
plot(x,lm1$fitted.values,col='blue',ylab="fitted values")
#(c)
#Replace function bs with ns
library(ISLR)
library(splines)
set.seed(10)
#(a)
n=300
x=matrix(c(runif(n,min=0,max=1)),nrow=n)
e=matrix(c(rnorm(n,mean=0,sd=2)),nrow=n)
fx=matrix(1,nrow=n)
y=matrix(1,nrow=n)
for (i in 1:n){
fx[i]=60*(x[i]-1)^2*(x[i])^5-100*(x[i]-1)^4*x[i]
y[i]=fx[i]+e[i]
}
GCV=matrix(1,nrow=28)
for (k in 3:30){
fit=lm(y~bs(x,df=k))
pred=predict(fit)
GCV[k-2]=(sum((y-pred)^2)/n)/((1-(k+1)/n)^2)
}
plot(3:30,GCV,type='b',xlab='k',ylab='GCV')
#(b)
par(mfrow=c(2,1))
index=order(x)
plot(x[index],fx[index],type="b",col='red',type="l")
lm1=lm(fx~bs(x,degree=4))
plot(x,lm1$fitted.values,col='blue',ylab="fitted values")
#(c)
#Replace function bs with ns
plot(x[index],fx[index],type="b",col='red',type="l")
library(ISLR)
library(splines)
set.seed(10)
#(a)
n=300
x=matrix(c(runif(n,min=0,max=1)),nrow=n)
e=matrix(c(rnorm(n,mean=0,sd=2)),nrow=n)
fx=matrix(1,nrow=n)
y=matrix(1,nrow=n)
for (i in 1:n){
fx[i]=60*(x[i]-1)^2*(x[i])^5-100*(x[i]-1)^4*x[i]
y[i]=fx[i]+e[i]
}
GCV=matrix(1,nrow=28)
for (k in 3:30){
fit=lm(y~bs(x,df=k))
pred=predict(fit)
GCV[k-2]=(sum((y-pred)^2)/n)/((1-(k+1)/n)^2)
}
plot(3:30,GCV,type='b',xlab='k',ylab='GCV')
#(b)
par(mfrow=c(2,1))
index=order(x)
plot(x[index],fx[index],type="l",col='red')
lm1=lm(fx~bs(x,degree=4))
plot(x,lm1$fitted.values,col='blue',ylab="fitted values")
#(c)
#Replace function bs with ns
plot(x[index],fx[index],type="l",col='red')
points(x,lm1$fitted.values,col='blue')
plot(x[index],fx[index],type="l",col='red')
points(x,lm1$fitted.values,col='blue')
library(ISLR)
library(splines)
set.seed(10)
#(a)
n=300
x=matrix(c(runif(n,min=0,max=1)),nrow=n)
e=matrix(c(rnorm(n,mean=0,sd=2)),nrow=n)
fx=matrix(1,nrow=n)
y=matrix(1,nrow=n)
for (i in 1:n){
fx[i]=60*(x[i]-1)^2*(x[i])^5-100*(x[i]-1)^4*x[i]
y[i]=fx[i]+e[i]
}
GCV=matrix(1,nrow=28)
for (k in 3:30){
fit=lm(y~bs(x,df=k))
pred=predict(fit)
GCV[k-2]=(sum((y-pred)^2)/n)/((1-(k+1)/n)^2)
}
plot(3:30,GCV,type='b',xlab='k',ylab='GCV')
#(b)
par(mfrow=c(2,1))
index=order(x)
plot(x[index],fx[index],type="l",col='red')
points(x,lm1$fitted.values,col='blue')
lm1=lm(fx~bs(x,degree=4))
plot(x,lm1$fitted.values,col='blue',ylab="fitted values")
#(c)
#Replace function bs with ns
library(ISLR)
library(splines)
set.seed(10)
#(a)
n=300
x=matrix(c(runif(n,min=0,max=1)),nrow=n)
e=matrix(c(rnorm(n,mean=0,sd=2)),nrow=n)
fx=matrix(1,nrow=n)
y=matrix(1,nrow=n)
for (i in 1:n){
fx[i]=60*(x[i]-1)^2*(x[i])^5-100*(x[i]-1)^4*x[i]
y[i]=fx[i]+e[i]
}
lambda=seq(-10,1,by=1)
lambda=as.matrix(exp(lambda))
GCV=matrix(1,nrow=length(lambda))
for (k in 1:length(lambda)){
fit=smooth.spline(x,y,lambda=lambda[k])
pred=predict(fit,y)
df=fit$df
GCV[k]=(sum((y-pred$y)^2)/n)/((1-df/n)^2)
}
plot(lambda,GCV,type='b',xlab='lambda',ylab='GCV',main='lambda vs GCV')
min_lambda=lambda[which.min(GCV)]
lambda
plot(lambda,GCV,type='b',xlab='lambda',ylab='GCV',main='lambda vs GCV')
GCV
which.max(GCV)
which.MIN(GCV)
which.min(GCV)
library(ISLR)
library(splines)
set.seed(10)
#(a)
n=300
x=matrix(c(runif(n,min=0,max=1)),nrow=n)
e=matrix(c(rnorm(n,mean=0,sd=2)),nrow=n)
fx=matrix(1,nrow=n)
y=matrix(1,nrow=n)
for (i in 1:n){
fx[i]=60*(x[i]-1)^2*(x[i])^5-100*(x[i]-1)^4*x[i]
y[i]=fx[i]+e[i]
}
lambda=seq(-10,0,length=100)
lambda=as.matrix(exp(lambda))
GCV=matrix(1,nrow=length(lambda))
for (k in 1:length(lambda)){
fit=smooth.spline(x,y,lambda=lambda[k])
pred=predict(fit,y)
df=fit$df
GCV[k]=(sum((y-pred$y)^2)/n)/((1-df/n)^2)
}
plot(lambda,GCV,type='b',xlab='lambda',ylab='GCV',main='lambda vs GCV')
min_lambda=lambda[which.min(GCV)]
GCV
summary(lm(y~x))
rm(list=ls())
library(MASS)
library(higrad)
setwd("D:/Dropbox/SGD_Linear_Constraint/realdata")
set.seed(1)
df=read.csv("CASP.csv")
for (i in 2:10){
mu=mean(df[,i])
sigma=sd(df[,i])
df[,i]=(df[,i]-mu)/sigma
}
n=dim(df)[1]
p=9
x=as.matrix(df[,2:(2+p-1)])
x=cbind(rep(1,n),x)
y=as.numeric(df[,1])
dl=function(y,x,b){
s=-(y-sum(b*x))*x
return(s)
}
ddl=function(y,x,b){
s=x%*%t(x)
return(s)
}
B=rep(0,(p+1)*1)
B=matrix(B,ncol=p+1)
#B[1,2]=1
#B[2,6]=1
#B[3,8]=1
B[1,10]=1
P=diag(rep(1,p+1))-t(B)%*%solve(B%*%t(B))%*%B
I=diag(rep(1,p+1))
b=c(0,rep(0,p))
sb=c(0,rep(0,p))
bI=b
sbI=sb
Ghat=0
Shat=0
n0=1
for(i in 1:n){
if (i<=n0){
tau=0.1
}else{
tau=0.5*(i-n0)^(-0.501)
# print(t(b))
}
b=b-tau*dl(y[i],x[i,],b)
b=P%*%b
sb=sb+b
bI=bI-tau*dl(y[i],x[i,],bI)
sbI=sbI+bI
Ghat=Ghat+ddl(y[i],x[i,],sb/i)
Shat=Shat+dl(y[i],x[i,],sb/i)%*%t(dl(y[i],x[i,],sb/i))
}
Ghat=Ghat/n
Shat=Shat/n
Vhat=ginv(P%*%Ghat%*%P)%*%Shat%*%ginv(P%*%Ghat%*%P)
std=sqrt(diag(Vhat/n))
sb=sb/n
sbI=sbI/n
cf1=sb
cf0=sbI
cf2=higrad(x,y,nsplits =1, nthreads = 1)$coefficients
cf3=lm(y~x-1)$coef
print(cbind(cf1,cf0,cf2,cf3))
pv=2*pnorm(-abs(cf1/std))
pv=round(pv,3)
eigen(P)
kappa
rm(list=ls())
library(MASS)
library(higrad)
setwd("D:/Dropbox/SGD_Linear_Constraint/realdata")
set.seed(1)
df=read.csv("CASP.csv")
for (i in 2:10){
mu=mean(df[,i])
sigma=sd(df[,i])
df[,i]=(df[,i]-mu)/sigma
}
n=dim(df)[1]
p=9
x=as.matrix(df[,2:(2+p-1)])
x=cbind(rep(1,n),x)
y=as.numeric(df[,1])
dl=function(y,x,b){
s=-(y-sum(b*x))*x
return(s)
}
ddl=function(y,x,b){
s=x%*%t(x)
return(s)
}
B=rep(0,(p+1)*1)
B=matrix(B,ncol=p+1)
#B[1,2]=1
#B[2,6]=1
#B[3,8]=1
B[2,10]=1
P=diag(rep(1,p+1))-t(B)%*%solve(B%*%t(B))%*%B
I=diag(rep(1,p+1))
#P=diag(rep(1,p+1))
#b=lm(y[1:10000]~x[1:10000,]-1)$coef
b=c(0,rep(0,p))
sb=c(0,rep(0,p))
bI=b
sbI=sb
Ghat=0
Shat=0
n0=1
for(i in 1:n){
if (i<=n0){
tau=0.1
}else{
tau=0.5*(i-n0)^(-0.501)
# print(t(b))
}
b=b-tau*dl(y[i],x[i,],b)
b=P%*%b
sb=sb+b
bI=bI-tau*dl(y[i],x[i,],bI)
sbI=sbI+bI
Ghat=Ghat+ddl(y[i],x[i,],sbI/i)
Shat=Shat+dl(y[i],x[i,],sbI/i)%*%t(dl(y[i],x[i,],sbI/i))
}
Ghat=Ghat/n
Shat=Shat/n
Vhat=ginv(Ghat)%*%Shat%*%ginv(Ghat)
std=sqrt(diag(Vhat/n))
sb=sb/n
sbI=sbI/n
What=(I-P)%*%ginv(Ghat)%*%Shat%*%ginv(Ghat)%*%(I-P)
kappa=n*t(sb-sbI)%*%ginv(What)%*%(sb-sbI)
cf1=sb
cf0=sbI
cf2=higrad(x,y,nsplits =1, nthreads = 1)$coefficients
cf3=lm(y~x-1)$coef
print(cbind(cf1,cf0,cf2,cf3))
pv=2*pnorm(-abs(cf1/std))
pv=round(pv,3)
rm(list=ls())
library(MASS)
library(higrad)
setwd("D:/Dropbox/SGD_Linear_Constraint/realdata")
set.seed(1)
df=read.csv("CASP.csv")
for (i in 2:10){
mu=mean(df[,i])
sigma=sd(df[,i])
df[,i]=(df[,i]-mu)/sigma
}
n=dim(df)[1]
p=9
x=as.matrix(df[,2:(2+p-1)])
x=cbind(rep(1,n),x)
y=as.numeric(df[,1])
dl=function(y,x,b){
s=-(y-sum(b*x))*x
return(s)
}
ddl=function(y,x,b){
s=x%*%t(x)
return(s)
}
B=rep(0,(p+1)*1)
B=matrix(B,ncol=p+1)
#B[1,2]=1
#B[2,6]=1
#B[3,8]=1
B[1,10]=1
P=diag(rep(1,p+1))-t(B)%*%solve(B%*%t(B))%*%B
I=diag(rep(1,p+1))
#P=diag(rep(1,p+1))
#b=lm(y[1:10000]~x[1:10000,]-1)$coef
b=c(0,rep(0,p))
sb=c(0,rep(0,p))
bI=b
sbI=sb
Ghat=0
Shat=0
n0=1
for(i in 1:n){
if (i<=n0){
tau=0.1
}else{
tau=0.5*(i-n0)^(-0.501)
# print(t(b))
}
b=b-tau*dl(y[i],x[i,],b)
b=P%*%b
sb=sb+b
bI=bI-tau*dl(y[i],x[i,],bI)
sbI=sbI+bI
Ghat=Ghat+ddl(y[i],x[i,],sbI/i)
Shat=Shat+dl(y[i],x[i,],sbI/i)%*%t(dl(y[i],x[i,],sbI/i))
}
Ghat=Ghat/n
Shat=Shat/n
Vhat=ginv(Ghat)%*%Shat%*%ginv(Ghat)
std=sqrt(diag(Vhat/n))
sb=sb/n
sbI=sbI/n
What=(I-P)%*%ginv(Ghat)%*%Shat%*%ginv(Ghat)%*%(I-P)
kappa=n*t(sb-sbI)%*%ginv(What)%*%(sb-sbI)
cf1=sb
cf0=sbI
cf2=higrad(x,y,nsplits =1, nthreads = 1)$coefficients
cf3=lm(y~x-1)$coef
print(cbind(cf1,cf0,cf2,cf3))
pv=2*pnorm(-abs(cf1/std))
pv=round(pv,3)
eigen(P)
kappa
1-pchisq(kappa,1)
